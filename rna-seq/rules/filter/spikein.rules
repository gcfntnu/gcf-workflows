#-*- mode:snakemake -*-
"""

"""
from os.path import join

SPIKE_DIR = join(EXT_DIR, 'spikein')
FILTER_CONF = config.get('filter')
if FILTER_CONF is None:
   config['filter'] = FILTER_CONF = {}
SPIKE_CONF = FILTER_CONF.get('spikein')
if SPIKE_CONF is None:
   config['filter']['spikein'] = SPIKE_CONF = {}
REF = config['filter']['spikein'].get('ref', 'ERCC092')
PE = len(config['read_geometry']) > 1

def get_trimmed_fastq(wildcards):
   trimmer = config['filter']['trim']['trimmer']
   R1 = join(FILTER_INTERIM, '{merge}', 'trimmed', trimmer, '{sample}_R1.fastq')
   if PE:
      R2 = join(FILTER_INTERIM, '{merge}', 'trimmed', trimmer, '{sample}_R2.fastq')
      return {'R1': R1, 'R2': R2}
   return {'R1': R1}

if PE:
   rule spikein_filter_bowtie:
       input:
           unpack(get_trimmed_fastq),
           index = join(EXT_DIR, 'ERCC', 'index', REF, 'bowtie', REF + '.1.ebwt')
       output:
           R1 = temp(join(FILTER_INTERIM, '{merge}', 'spikein', 'bowtie', '{sample}_R1.fastq')),
           R2 = temp(join(FILTER_INTERIM, '{merge}', 'spikein', 'bowtie', '{sample}_R2.fastq')),
           counts = join(FILTER_INTERIM, '{merge}', 'spikein', 'bowtie', '{sample}.counts')
       singularity:
           'docker://' + config['docker']['bowtie_samtools']
       params:
           args = '-n 0 -k 1 -q --best --norc -S ',
           index = join(EXT_DIR, 'ERCC', 'index', REF, 'bowtie', REF),
           prefix = '{sample}.fq'
       threads:
           2
       log:
           bowtie = join(FILTER_INTERIM, '{merge}', 'spikein', 'bowtie', '{sample}.spikein.bowtie.log'),
           error = join(FILTER_INTERIM, '{merge}', 'spikein', 'bowtie', '{sample}.spikein.bowtie.error')
       shell:
           'bowtie {params.index} '
           '-1 {input.R1} '
           '-2 {input.R2} '
           '--un {params.prefix} '
           '-p {threads} '
           '{params.args} '
           '2>> {log.bowtie} '
           '| samtools view -q 5 -S - | cut -f3 | sort | uniq -c  > {output.counts} '
           '2>> {log.error} '
           '&& '
           'mv {wildcards.sample}_1.fq {output.R1} '
           '&& '
           'mv {wildcards.sample}_2.fq {output.R2} '
   rule spikein_filter_bowtie2:
       input:
           unpack(get_trimmed_fastq),
           index = join(EXT_DIR, 'ERCC', 'index', REF, 'bowtie2', REF + '.1.bt2')
       output:
           R1 = temp(join(FILTER_INTERIM, '{merge}', 'spikein', 'bowtie2', '{sample}_R1.fastq')),
           R2 = temp(join(FILTER_INTERIM, '{merge}', 'spikein', 'bowtie2', '{sample}_R2.fastq')),
           counts = join(FILTER_INTERIM, '{merge}', 'spikein', 'bowtie2', '{sample}.counts')
       singularity:
           'docker://' + config['docker']['bowtie2_samtools']
       params:
           args = '-D 15 -R 2 -N 0 -i S,1,0 --norc',
           index = join(EXT_DIR, 'ERCC', 'index', REF, 'bowtie2', REF),
           prefix = join(FILTER_INTERIM, '{merge}', 'spikein', 'bowtie2', '{sample}_R%.fastq')
       threads:
           2
       log:
           bowtie2 = join(FILTER_INTERIM, '{merge}', 'spikein', 'bowtie2', '{sample}.spikein.bowtie2.log'),
           error = join(FILTER_INTERIM, '{merge}', 'spikein', 'bowtie2', '{sample}.spikein.bowtie2.error')
       shell:
           'bowtie2 '
           '-1 {input.R1} '
           '-2 {input.R2} '
           '--un-conc {params.prefix} '
           '-x {params.index} '
           '-p {threads} '
           '{params.args} '
           '2>> {log.bowtie2} '
           '| samtools view -S -q5 - | cut -f3 | sort | uniq -c  > {output.counts} '
           '2>> {log.error} '

else:
   rule spikein_filter_bowtie:
       input:
           unpack(get_trimmed_fastq),
           index = join(EXT_DIR, 'ERCC', 'index', REF, 'bowtie', REF + '.1.ebwt')
       output:
           R1 = temp(join(FILTER_INTERIM, '{merge}', 'spikein', 'bowtie', '{sample}_R1.fastq')),
           counts = join(FILTER_INTERIM, '{merge}', 'spikein', 'bowtie', '{sample}.counts')
       singularity:
           'docker://' + config['docker']['bowtie_samtools']
       params:
           args = '-n 0 -k 1 -l 18 -q --best --norc -S ',
           index = join(EXT_DIR, 'ERCC', 'index', REF, 'bowtie', REF)
       threads:
           2
       log:
           bowtie = join(FILTER_INTERIM, '{merge}', 'spikein', 'bowtie', '{sample}.spikein.bowtie.log'),
           error = join(FILTER_INTERIM, '{merge}', 'spikein', 'bowtie', '{sample}.spikein.bowtie.error')
       shell:
           'bowtie {params.index} '
           '{input.R1} '
           '--un {output.R1} '
           '-p {threads} '
           '{params.args} '
           '2>> {log.bowtie} '
           '| samtools view -q 5 -S - | cut -f3 | sort | uniq -c  > {output.counts} '
           '2>> {log.error} '
        
   rule spikein_filter_bowtie2:
       input:
           unpack(get_trimmed_fastq),
           index = join(EXT_DIR, 'ERCC', 'index', REF, 'bowtie2', REF + '.1.bt2')
       output:
           R1 = temp(join(FILTER_INTERIM, '{merge}', 'spikein', 'bowtie2', '{sample}_R1.fastq')),
           counts = join(FILTER_INTERIM, '{merge}', 'spikein', 'bowtie2', '{sample}.counts')
       singularity:
           'docker://' + config['docker']['bowtie2_samtools']
       params:
           args = '-D 15 -R 2 -N 0 -i S,1,0 --norc',
           index = join(EXT_DIR, 'ERCC', 'index', REF, 'bowtie2', REF)
       threads:
           2
       log:
           bowtie2 = join(FILTER_INTERIM, '{merge}', 'spikein', 'bowtie2', '{sample}.spikein.bowtie2.log'),
           error = join(FILTER_INTERIM, '{merge}', 'spikein', 'bowtie2', '{sample}.spikein.bowtie2.error')
       shell:
           'bowtie2 '
           '-U {input.R1} '
           '--un {output.R1} '
           '-x {params.index} '
           '-p {threads} '
           '{params.args} '
           '2>> {log.bowtie2} '
           '| samtools view -S -q5 - | cut -f3 | sort | uniq -c  > {output.counts} '
           '2>> {log.error} '
           
rule spikein_filter_skip:
    input:
        R1 = join(FILTER_INTERIM, '{merge}', 'trimmed', 'fastp', '{sample}_R1.fastq'),
    output:
        R1 = temp(join(FILTER_INTERIM, '{merge}', 'spikein', 'skip', '{sample}_R1.fastq')),
        counts = join(FILTER_INTERIM, '{merge}', 'spikein', 'skip', '{sample}.counts')
    shell:
        'cp -f {input} {output.R1} && touch {output.counts}'

rule spikein_filter_skip_R2:
    input:
        R2 = join(FILTER_INTERIM, '{merge}', 'trimmed', 'fastp', '{sample}_R2.fastq'),
    output:
        R2 = temp(join(FILTER_INTERIM, '{merge}', 'spikein', 'skip', '{sample}_R2.fastq'))
    shell:
        'cp -f {input} {output}'
