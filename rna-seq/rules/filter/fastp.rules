#-*- mode:snakemake -*-

ADAPTER = config.get('adapter') or LIBPREP['single_end'].get('adapter')
ADAPTER2 = config.get('adapter2') or LIBPREP['paired_end'].get('adapter2')
PE = len(config['read_geometry']) > 1


rule fastp_interleave_fastq:
    input:
        unpack(get_raw_fastq)
    output:
        pipe(join(FILTER_INTERIM, 'interleaved_fastq', '{sample}.fastq'))
    params:
        script = srcdir('scripts/interleave_fastq.sh')
    version:
        lambda wildcards: subprocess.check_output('fastp --version', shell=True)
    shell:
        '{params.script} <(zcat {input.R1}) <(zcat {input.R2}) > {output}'

if PE:
    rule fastp_join:
        input:
            rules.fastp_interleave_fastq.output
        output:
            R1 = temp(join(FILTER_INTERIM, 'merged_fastq', 'trimmed', 'fastp', '{sample}_R1.fastq')),
            R2 = temp(join(FILTER_INTERIM, 'merged_fastq', 'trimmed', 'fastp', '{sample}_R2.fastq')),
            log_html = join(FILTER_INTERIM, 'merged_fastq', 'trimmed', 'fastp', 'qc', '{sample}.html'),
            log_json = join(FILTER_INTERIM, 'merged_fastq', 'trimmed', 'fastp', 'qc', '{sample}.json')
        threads:
            1
        params:
            args = '--low_complexity_filter --overrepresentation_analysis --overrepresentation_sampling 1000 ',
            adapter_arg = '--adapter_sequence {} --adapter_sequence_r2 {} '.format(ADAPTER, ADAPTER2) if ADAPTER else '--detect_adapter_for_pe ',
            kit_args = LIBPREP.get('paired_end',{}).get('fastp', {}).get('params') or ''
        log:
            json = 'logs/{sample}/{sample}.fastp.json'
        singularity:
            'docker://' + config['docker']['fastp']
        shell:
            'cat {input} | fastp --stdin --interleaved_in -o {output.R1} -O {output.R2} -j {output.log_json} -h {output.log_html} --thread {threads} {params} && cp {output.log_json} {log.json} '

    rule fastp:
        input:
            unpack(get_raw_fastq)
        output:
            R1 = temp(join(FILTER_INTERIM, 'fastq', 'trimmed', 'fastp', '{sample}_R1.fastq')),
            R2 = temp(join(FILTER_INTERIM, 'fastq', 'trimmed', 'fastp', '{sample}_R2.fastq')),
            log_html = join(FILTER_INTERIM, 'fastq', 'trimmed', 'fastp', 'qc', '{sample}.html'),
            log_json = join(FILTER_INTERIM, 'fastq', 'trimmed', 'fastp', 'qc', '{sample}.json')
        params:
            args = '--low_complexity_filter --overrepresentation_analysis --overrepresentation_sampling 10000 ',
            adapter_arg = '--adapter_sequence {} --adapter_sequence_r2 {} '.format(ADAPTER, ADAPTER2) if ADAPTER else '--detect_adapter_for_pe ',
            kit_args = LIBPREP.get('paired_end',{}).get('fastp', {}).get('params') or ''
        threads:
            1
        log:
            json = 'logs/{sample}/{sample}.fastp.json'
        singularity:
            'docker://' + config['docker']['fastp']
        shell:
            'fastp -i {input.R1} -I {input.R2} -o {output.R1} -O {output.R2} -j {output.log_json} -h {output.log_html} --thread {threads} {params} && cp {output.log_json} {log.json} '

    rule fastp_join_skip:
        input:
            join(FILTER_INTERIM, 'interleaved_fastq', '{sample}.fastq')
        output:
            R1 = temp(join(FILTER_INTERIM, 'merged_fastq', 'trimmed', 'skip', '{sample}_R1.fastq')),
            R2 = temp(join(FILTER_INTERIM, 'merged_fastq', 'trimmed', 'skip' '{sample}_R2.fastq')),
            log_html = join(FILTER_INTERIM, 'merged_fastq', 'trimmed', 'fastp', 'qc', '{sample}.html'),
            log_json = join(FILTER_INTERIM, 'merged_fastq', 'trimmed', 'fastp', 'qc', '{sample}.json')
        threads:
            1
        params:
            args = '--overrepresentation_analysis --overrepresentation_sampling 10000 -A -Q -L -G '
        log:
            json = 'logs/{sample}/fastp.json'
        singularity:
            'docker://quay.io/biocontainers/fastp:0.19.7--hdbcaa40_0'
        shell:
            'cat {input} | fastp --stdin --interleaved_in -o {output.R1} -O {output.R2} -j {output.log_json} -h {output.log_html} --thread {threads} {params}  && cp {output.log_json} {log.json} '
            
    rule fastp_skip:
        input:
            unpack(get_raw_fastq)
        output:
            R1 = temp(join(FILTER_INTERIM, 'fastq', 'trimmed', 'skip', '{sample}_R1.fastq')),
            R2 = temp(join(FILTER_INTERIM, 'fastq', 'trimmed', 'skip' '{sample}_R2.fastq')),
            log_html = join(FILTER_INTERIM, 'fastq', 'trimmed', 'fastp', 'qc', '{sample}.html'),
            log_json = join(FILTER_INTERIM, 'fastq', 'trimmed', 'fastp', 'qc', '{sample}.json')
        params:
        params:
            args = '--overrepresentation_analysis --overrepresentation_sampling 10000 -A -Q -L -G ',
        threads:
            1
        log:
            json = 'logs/{sample}/{sample}.fastp.json'
        singularity:
            'docker://' + config['docker']['fastp']
        shell:
            'fastp -i {input.R1} -I {input.R2} -o {output.R1} -O {output.R2} -j {output.log_json} -h {output.log_html} --thread {threads} {params} && cp {output.log_json} {log.json} '

else:
    rule fastp_join:
        input:
            unpack(get_raw_fastq)
        output:
            R1 = temp(join(FILTER_INTERIM, 'merged_fastq', 'trimmed', 'fastp', '{sample}_R1.fastq')),
            log_html = join(FILTER_INTERIM, 'merged_fastq', 'trimmed', 'fastp', 'qc', '{sample}.html'),
            log_json = join(FILTER_INTERIM, 'merged_fastq', 'trimmed', 'fastp', 'qc', '{sample}.json')           
        threads:
            1        
        params:
            args = '--low_complexity_filter --overrepresentation_analysis --overrepresentation_sampling 10000 ',
            adapter_arg = '--adapter_sequence {}'.format(ADAPTER) if ADAPTER else '',
            kit_args = LIBPREP.get('single_end',{}).get('fastp', {}).get('params') or ''
        log:
            json = 'logs/{sample}/{sample}.fastp.json'
        singularity:
            'docker://' + config['docker']['fastp']
        shell:
            ' zcat {input} | fastp --stdin -o {output.R1} -j {output.log_json} -h {output.log_html} --thread {threads} {params} && cp {output.log_json} {log.json} '

    rule fastp:
        input:
            unpack(get_raw_fastq)
        output:
            R1 = temp(join(FILTER_INTERIM, 'fastq', 'trimmed', 'fastp', '{sample}_R1.fastq')),
            log_html = join(FILTER_INTERIM, 'fastq', 'trimmed', 'fastp', 'qc', '{sample}.html'),
            log_json = join(FILTER_INTERIM, 'fastq', 'trimmed', 'fastp', 'qc', '{sample}.json')
        threads:
            1
        params:
            args = '--low_complexity_filter --overrepresentation_analysis --overrepresentation_sampling 10000 ',
            adapter_arg = '--adapter_sequence {}'.format(ADAPTER) if ADAPTER else '',
            kit_args = LIBPREP.get('single_end',{}).get('fastp', {}).get('params') or ''
        log:
            json = 'logs/{sample}/{sample}.fastp.json'
        singularity:
            'docker://' + config['docker']['fastp']
        shell:
            'fastp -i {input.R1} -o {output.R1} -j {output.log_json} -h {output.log_html} --thread {threads} {params} && cp {output.log_json} {log.json} '
            
    rule fastp_join_skip:
        input:
            unpack(get_raw_fastq)
        output:
            R1 = temp(join(FILTER_INTERIM, 'merged_fastq', 'trimmed', 'skip', '{sample}_R1.fastq')),
            log_html = join(FILTER_INTERIM, 'merged_fastq', 'trimmed', 'fastp', 'qc', '{sample}.html'),
            log_json = join(FILTER_INTERIM, 'merged_fastq', 'trimmed', 'fastp', 'qc', '{sample}.json')               
        threads:
            1        
        params:
            args = '--overrepresentation_analysis --overrepresentation_sampling 10000 -A -Q -L -G'
        log:
            json = 'logs/{sample}/{sample}.fastp.json'
        singularity:
            'docker://' + config['docker']['fastp']
        shell:
            ' zcat {input} | fastp --stdin -o {output.R1} -j {output.log_json} -h {output.log_html} --thread {threads} {params} && cp {output.log_json} {log.json} '

    rule fastp_skip:
        input:
            unpack(get_raw_fastq)
        output:
            R1 = temp(join(FILTER_INTERIM, 'fastq', 'trimmed', 'skip', '{sample}_R1.fastq')),
            log_html = join(FILTER_INTERIM, 'fastq', 'trimmed', 'fastp', 'qc', '{sample}.html'),
            log_json = join(FILTER_INTERIM, 'fastq', 'trimmed', 'fastp', 'qc', '{sample}.json')
        params:
            args = '--overrepresentation_analysis --overrepresentation_sampling 10000 -A -Q -L -G',
        threads:
            1
        log:
            json = 'logs/{sample}/{sample}.fastp.json'
        singularity:
            'docker://' + config['docker']['fastp']
        shell:
            'fastp -i {input.R1} -o {output.R1} -j {output.log_json} -h {output.log_html} --thread {threads} {params} && cp {output.log_json} {log.json} ' 
