#-*- mode: snakemake -*-
"""
Snakemake rules for filtering fastq files before analysis.

Fastp used for standard filtering, bowtie2/bowtie for spikein and contaminant filter, bbduk/bowtie2 for ribo removal.  

Filter steps:
-------------

1. Adapter trimming, quality filter (_get_trimmed_R1)
2. Spikein filter [optional] (_get_spike_clean_R1)
3. Ribosomal dna filter [optional] (_get_ribo_clean_R1)
4. Contaminant filter [optional] (_get_contaminant_clean_R1)

"""

FILTER_INTERIM = join(INTERIM_DIR, 'rnaseq', 'filter')

include:
    'filter/fastp.rules'
include:
    'filter/spikein.rules'
include:
    'filter/contaminants.rules'
include:
    'filter/rrna.rules'

rule clean_fastq:
    input:
        join(FILTER_INTERIM, 'merged_fastq', 'rrna', config['filter']['ribosomal']['quantifier'], '{sample}_R{readnum}.fastq')
    output:
        join(FILTER_INTERIM, 'cleaned', '{sample}_R{readnum}.fastq')
    shell:
        'cp -fL {input} {output} '

rule clean_fastq_compress:
    input:
        rules.clean_fastq.output
    output:
        join(FILTER_INTERIM, 'cleaned', '{sample}_R{readnum}.fastq.gz')
    shell:
        'gzip {input}'
    
def get_processed_fastq(wildcards):
    COMPRESS = config['filter'].get('compress_filtered_fastq', False)
    DST_PTH = join(FILTER_INTERIM, 'cleaned')
    fastq = get_raw_fastq(wildcards)
    R1 = [i.split(FASTQ_DIR)[-1][1:] for i in fastq['R1']]
    if not COMPRESS:
        R1 = [i.split('.gz')[0] for i in R1 if i.endswith('.gz')]
    R2 = fastq.get('R2')
    if R2:
        R2 = [i.split(FASTQ_DIR)[-1][1:] for i in fastq['R2']]
        if not COMPRESS:
            R2 = [i.split('.gz')[0] for i in R2 if i.endswith('.gz')]
    if COMPRESS:
        ext = '.fastq.gz'
    else:
        ext = '.fastq'
    R1 = [join(DST_PTH, wildcards.sample + '_R1' + ext)]
    if R2:
        R2 = [join(DST_PTH, wildcards.sample + '_R2' + ext)]
        out = {'R1': R1, 'R2': R2}
    else:
        out = {'R1': R1}
    return out


rule _filter:
    input:
        unpack(get_processed_fastq)
    output:
        temp(touch('{sample}.filtered'))

rule filter_all:
    input:
        expand(rules._filter.output, sample=SAMPLES)
