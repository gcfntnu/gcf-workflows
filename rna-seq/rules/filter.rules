#-*- mode: snakemake -*-
"""
Snakemake rules for filtering fastq files before analysis.

Fastp used for standard filtering, bowtie2/bowtie for spikein and contaminant filter, bbduk/bowtie2 for ribo removal.  

Filter steps:
-------------

1. Adapter trimming, quality filter (_get_trimmed_R1)
2. Spikein filter [optional] (_get_spike_clean_R1)
3. Ribosomal dna filter [optional] (_get_ribo_clean_R1)
4. Contaminant filter [optional] (_get_contaminant_clean_R1)

"""

FILTER_INTERIM = join(INTERIM_DIR, 'rnaseq', 'filter')

include:
    'filter/fastp.rules'
include:
    'filter/spikein.rules'
include:
    'filter/contaminants.rules'
include:
    'filter/rrna.rules'
    
def get_processed_fastq(wildcards):
    ZIP_FILTERED_FASTQ = False #FIXME: options
    DST_PTH = join(FILTER_INTERIM, '{}', 'rrna', config['filter']['ribosomal']['quantifier'])
    fastq = get_raw_fastq(wildcards)
    R1 = [i.split(FASTQ_DIR)[-1][1:] for i in fastq['R1']]
    if not ZIP_FILTERED_FASTQ:
        R1 = [i.split('.gz')[0] for i in R1 if i.endswith('.gz')]

    R2 = fastq.get('R2')
    if R2:
        R2 = [i.split(FASTQ_DIR)[-1][1:] for i in fastq['R2']]
        if not ZIP_FILTERED_FASTQ:
            R2 = [i.split('.gz')[0] for i in R2 if i.endswith('.gz')]
    
    fastq_merge = config['filter']['fastq_merge']
    if fastq_merge['skip']:
        out = DST_PTH.format('fastq')
        R1 = [join(out, i) for i in R1]
        if R2:
            R2 = [join(out, i) for i in R2]
    else:
        out = DST_PTH.format('merged_fastq')
        if ZIP_FILTERED_FASTQ:
            ext = '.fastq.gz'
        else:
            ext = '.fastq'
        R1 = [join(out, wildcards.sample + '_R1' + ext)]
        if R2:
            R2 = [join(out, wildcards.sample + '_R2' + ext)]
    if R2:
        out = {'R1': R1, 'R2': R2}
    else:
        out = {'R1': R1}
    return out


rule _filter:
    input:
        unpack(get_processed_fastq)
    output:
        temp(touch('{sample}.filtered'))

rule filter_all:
    input:
        expand(rules._filter.output, sample=SAMPLES)
