#-*- mode:snakemake -*-
"""
NOTES:
"""
from os.path import join

CONT_DIR = join(EXT_DIR, 'contaminants')

def contaminants_get_fasta(*args, **kw):
    ref = config['filter']['contaminants']['ref'].split(',')
    out = []
    for r in ref:
        if r.lower() == 'univec':
            out.append(join(EXT_DIR, 'univec', 'fasta', 'univec.fa'))
        if r.lower() == 'univec_core':
            out.append(join(EXT_DIR, 'univec_core', 'fasta', 'univec_core.fa'))
        if r.lower() == 'emvec':
            out.append(join(EXT_DIR, 'emvec', 'fasta', 'emvec.fa'))
        if r.lower() == 'common_bacterial_euk':
            out.append(join(EXT_DIR, 'JGI', 'fasta', 'fusedEPmasked2.fa'))
        if r.lower() == 'common_bacterial_prok':
            out.append(join(EXT_DIR, 'JGI', 'fasta', 'fusedEPmasked2.fa'))
                       
    return out

rule contaminants_fasta:
    input:
        contaminants_get_fasta
    output:
        join(INTERIM_DIR, 'contaminants', 'fasta', 'contaminants.fa')
    shell:
        'cat {input} > {output}'

rule contaminants_filter_se_bowtie:
    input:
        R1 = _filter_get_calibrator_clean,
        index = join(INTERIM_DIR, 'contaminants', 'index', 'contaminants', 'bowtie', 'contaminants.1.ebwt')
    output:
        R1 = temp(join(FILTER_INTERIM, 'contaminants', 'bowtie', '{sample}_R1.fastq')),
        counts = join(FILTER_INTERIM, 'contaminants', 'bowtie', '{sample}.counts')
    singularity:
        'docker://' + config['docker']['bowtie_samtools']
    params:
        args = '-n 0 -k 1 -l 18 -q --best --norc -S ',
        index = join(INTERIM_DIR, 'contaminants', 'index', 'contaminants', 'bowtie', 'contaminants')
    threads:
        2
    log:
        bowtie = join(FILTER_INTERIM, 'contaminants', 'bowtie', '{sample}.filter.log'),
        error = join(FILTER_INTERIM, 'contaminants', 'bowtie', '{sample}.filter.error')
    shell:
        'bowtie {params.index} '
        '{input.R1} '
        '--un {output.R1} '
        '-p {threads} '
        '{params.args} '
        '2>> {log.bowtie} '
        '| samtools view -q 5 -S - | cut -f3 | sort | uniq -c  > {output.counts} '
        '2>> {log.error} '
        
rule contaminants_filter_se_bowtie2:
    input:
        R1 = _filter_get_calibrator_clean,
        index = join(INTERIM_DIR, 'contaminants', 'index', 'contaminants', 'bowtie2', 'contaminants.1.bt2')
    output:
        R1 = temp(temp(join(FILTER_INTERIM, 'contaminants', 'bowtie2', '{sample}_R1.fastq'))),
        counts = join(FILTER_INTERIM, 'contaminants', 'bowtie2', '{sample}.counts')
    params:
        args = '-D 15 -R 2 -N 0 -L 18 -i S,1,0 --norc',
        index = join(INTERIM_DIR, 'contaminants', 'index', 'contaminants', 'bowtie2', 'contaminants')
    threads:
        2
    singularity:
        'docker://' + config['docker']['bowtie2_samtools']
    log:
        bowtie = join(FILTER_INTERIM, 'contaminants', 'bowtie2', '{sample}.filter.log'),
        error = join(FILTER_INTERIM, 'contaminants', 'bowtie2', '{sample}.filter.error')
    shell:
        'bowtie2 '
        '-U {input.R1} '
        '--un {output.R1} '
        '-x {params.index} '
        '-p {threads} '
        '{params.args} '
        '2>> {log.bowtie} '
        '| samtools view -S -q5 - | cut -f3 | sort | uniq -c  > {output.counts} '
        '2>> {log.error} '


def _filter_get_contaminants_clean(wildcards):
    quant = config['filter'].get('contaminants', {}).get('quantifier', 'skip')
    
    if quant == 'unitas':
        assert(config['quant'].get('method') == 'unitas')
        return _filter_get_calibrator_clean(wildcards)
    elif quant in ['bowtie', 'bowtie2']:
        return join(FILTER_INTERIM, 'contaminants', quant, '{}_R1.fastq'.format(wildcards.sample))
    elif quant == 'skip':
        return _filter_get_calibrator_clean(wildcards)
    else:
        raise ValueError('contaminants quantifier option not valid: {}'.format(quant))
