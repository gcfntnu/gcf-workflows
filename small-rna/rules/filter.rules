#-*- mode:snakemake -*-
import os

FILTER_INTERIM = join(INTERIM_DIR, 'smallrna', 'filtered')
FASTQ_DIR = config.get('fastq_dir', 'data/raw/fastq')

extra_conf_fn = srcdir('filter.config')
if os.path.exists(extra_conf_fn):
    with open(extra_conf_fn) as fh:
        c  = yaml.load(fh) or {}
        update_config2(config, c)


def _get_raw_fastq(wildcards):
    """Returns fastq files per sample.

    Support for merging fastq files of multiple samples by given (config) samplesheet column
    """
    if config['filter']['sample_merge']['skip'] or config['filter']['sample_merge']['sscol'] == 'Sample_ID':
        r1 = config['samples'][wildcards.sample]['R1']
        R1 = r1.split(',')
    else:
        R1 = []
        sscol = config['filter']['sample_merge']['sscol']
        for sample, values in config['samples'].items():
            if not sscol in values:
                raise ValueError('Sample merge column: `{}` not present in config!'.format(sscol))
            if values[sscol] == wildcards.sample:
                r1 = values['R1'].split(',')
                R1.extend(r1)
    
    R1 = [join(FASTQ_DIR, i) for i in R1]
    return R1
       
include:
    'filter/cliptrim.rules'
include:
    'filter/calibrators.rules'
include:
    'filter/contaminants.rules'
include:
    'filter/rrna.rules'


rule filtered_fastq:
    input:
        _filter_clean_fastq
    output:
        fastq = join(FILTER_INTERIM, 'cleaned', '{sample}_R1.fastq')
    shell:
        'cp -L {input} {output}'
        
def get_processed_fastq(wildcards):
    return join(FILTER_INTERIM, 'cleaned', '{sample}_R1.fastq')

    
