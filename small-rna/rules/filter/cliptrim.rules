#-*- mode:snakemake -*-

"""Trime and filter of small-rna sequences.

Fastp is round in two rounds in order to 
"""

rule filter_merge_fastq:
    input:
        unpack(get_raw_fastq)
    output:
        R1 = temp(join(FILTER_INTERIM, 'fastq', '{sample}.fastq'))
    shell:
        'zcat {input.R1} > {output.R1}'

rule filter_umidedup:
    input:
        fastq = rules.filter_merge_fastq.output
    output:
        temp(join(FILTER_INTERIM, 'dedup', '{sample}.collapsed.fq'))
    params:
        outdir = join(FILTER_INTERIM, 'dedup')
    threads:
        2
    singularity:
        'docker://' + config['docker']['bioseqzip']
    shell:
        'bioseqzip_collapse -i {input} --csv-report -f fastq -o {params.outdir} -t {threads}'
        
rule trim_fastp:
    input:
        fastq = rules.filter_umidedup.output if config['filter'].get('dedup', False) else rules.filter_merge_fastq.output
    output:
        fastq = temp(join(FILTER_INTERIM, 'fastp_trimmed', '{sample}.fastq'))
    params:
        args = config['filter']['trim']['fastp']['trim_args'],
        adapter = '' if not config.get('adapter') else '-a {} '.format(config.get('adapter'))
    threads:
        4
    log:
        json = join(FILTER_INTERIM, 'fastp_trimmed', '{sample}.json'),
        html = join(FILTER_INTERIM, 'fastp_trimmed', '{sample}.html')
    singularity:
        'docker://' + config['docker']['fastp']
    shell:
        'fastp '
        '-i {input.fastq} '
        '-o {output.fastq} '
        '{params.adapter} '
        '{params.args} '
        '--json {log.json} '
        '--html {log.html} '
        
rule filter_fastp:
    input:
        fastq = rules.trim_fastp.output.fastq
    output:
        fastq = temp(join(FILTER_INTERIM, 'fastp', '{sample}.fastq')),
        json = join(FILTER_INTERIM, 'fastp', '{sample}.json'),
        html = join(FILTER_INTERIM, 'fastp', '{sample}.html')
    params:
        args = config['filter']['trim']['fastp']['args'],
        adapter = config['adapter']
    threads:
        4
    singularity:
        'docker://' + config['docker']['fastp']
    shell:
        'fastp '
        '-i {input.fastq} '
        '-o {output.fastq} '
        '{params.args} ' 
        '--json {output.json} '
        '--html {output.html} '

rule filter_mirtrace_config:
    input:
        expand(join(FILTER_INTERIM, 'fastq', '{sample}.fastq'), sample=SAMPLES)
    output:
        temp('.filter_mirtrace.conf')
    params:
        adapter = config['adapter']
    run:
        with open(output[0], 'w') as fh:
            for k, v in config['samples'].items():
                fn = join(config['fastq_dir'], v['R1'])
                els = [fn, k, params.adapter]
                fh.write(','.join(els) + '\n')


def mirtrace_species(*args):
    map = {'homo_sapiens': 'hsa',
           'mus_musculus': 'mmu',
           'rattus_norvegicus': 'rno'}
    org = map[config['organism']]
    return org

rule filter_mirtrace:
    input:
        config = '.filter_mirtrace.conf',
        samples = expand(join(FILTER_INTERIM, 'fastq', '{sample}.fastq'), sample=SAMPLES)
    params:
        outdir = join(FILTER_INTERIM, 'mirtrace'),
        protocol = config['filter']['trim']['mirtrace']['protocol'],
        species = mirtrace_species(),
        title = config.get('project_id', 'GCF-0000-00'),
        args = '--write-fasta --comment Created by GCF. -f '
    singularity:
        'docker://' + config['docker']['mirtrace']
    threads:
        48
    output:
        expand(join(FILTER_INTERIM, 'mirtrace', 'qc_passed_reads.all.collapsed', '{sample}_R1.fasta'), sample=SAMPLES)
    shell:
        'mirtrace qc '
        '-s {params.species} '
        '-c {input.config} '
        '-o {params.outdir} '
        '-p {params.protocol} '
        '--title {params.title} '
        '-t {threads} '
        ' {args} '

rule rename_mirtrace:
    input:
        join(FILTER_INTERIM, 'mirtrace', 'qc_passed_reads.all.collapsed', '{sample}_R1.fasta')
    output:
        join(FILTER_INTERIM, 'mirtrace', '{sample}.fasta')
    shell:
        'ln -s {input} {output}'

def _filter_get_trimmed(wildcards):
    if config['filter']['trim']['quantifier'] == 'skip':
        return join(FILTER_INTERIM, 'fastq', '{sample}.fastq')
    elif config['filter']['trim']['quantifier'] == 'fastp':
        return join(FILTER_INTERIM, 'fastp', '{sample}.fastq')
    else:
        return join(FILTER_INTERIM, 'mirtrace', '{sample}.fasta')
