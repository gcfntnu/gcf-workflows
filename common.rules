print("WPRKFLOW: {}".format(WORKFLOW))

rule sample_info:
    output:
        join(INTERIM_DIR, 'sample_info.tsv')
    singularity:
        'docker://' + config['docker']['default']
    params:
        script = srcdir('scripts/create_sampleinfo.py')
    shell:
        'python {params.script} config.yaml > {output}'

if WORKFLOW == 'singlecell':
    rule qc_fastq_fastqc:
        input:
            R2 = get_filtered_fastq_R2
        output:
            zip = join(QC_INTERIM, 'fastqc', '{sample}_R2_fastqc.zip'),
            html = join(QC_INTERIM, 'fastqc', '{sample}_R2_fastqc.html')
        params:
            out = join(QC_INTERIM, 'fastqc')
        threads:
            2
        singularity:
            'docker://' + config['docker']['fastqc']
        shell:
            """
            mkdir -p {params.out}
            fastqc -t {threads} -o {params.out} {input.R2} '
            """
else:
    rule qc_fastq_fastqc:
        input:
            unpack(get_processed_fastq)
        output:
            zip = join(QC_INTERIM, 'fastqc', '{sample}_R1_fastqc.zip'),
            html = join(QC_INTERIM, 'fastqc', '{sample}_R1_fastqc.html')
        params:
            out = join(QC_INTERIM, 'fastqc')
        threads:
            2
        singularity:
            'docker://' + config['docker']['fastqc']
        shell:
            """
            mkdir -p {params.out}
            fastqc -t {threads} -o {params.out} {input}'
            """

rule qc_fastq_fastqscreen_config:
    input:
        human = join(EXT_DIR, 'ensembl', 'release-103', 'homo_sapiens', 'GRCh38', 'index', 'genome', 'bowtie2', 'genome.1.bt2'),
        mouse = join(EXT_DIR, 'ensembl', 'release-103', 'mus_musculus', 'GRCm39', 'index', 'genome', 'bowtie2', 'genome.1.bt2'),
        rat = join(EXT_DIR, 'ensembl', 'release-103', 'rattus_norvegicus', 'Rnor_6.0', 'index', 'genome', 'bowtie2', 'genome.1.bt2'),
        univec = join(EXT_DIR, 'univec_core', 'index', 'univec_core', 'bowtie2', 'univec_core.1.bt2')
    output:
        temp(os.path.abspath('fastq_screen.config'))
    params:
        human = join(EXT_DIR, 'ensembl', 'release-103', 'homo_sapiens', 'GRCh38', 'index', 'genome', 'bowtie2', 'genome'),
        mouse = join(EXT_DIR, 'ensembl', 'release-103', 'mus_musculus', 'GRCm38', 'index', 'genome', 'bowtie2', 'genome'),
        rat = join(EXT_DIR, 'ensembl', 'release-103', 'rattus_norvegicus', 'Rnor_6.0', 'index', 'genome', 'bowtie2', 'genome'),
        univec = join(EXT_DIR, 'univec_core', 'index', 'univec_core', 'bowtie2', 'univec_core')  
    shell:
        """
        echo DATABASE Human {params.human} > {output}
        echo DATABASE Mouse {params.mouse} >> {output}
        echo DATABASE Rat {params.rat}  >> {output}
        echo DATABASE UniVec {params.univec} >> {output}
        """


if WORKFLOW == 'singlecell':
    rule qc_fastq_fastqscreen:
        input:
            R2 = get_filtered_fastq_R2,
            config = rules.qc_fastq_fastqscreen_config.output 
        output:
            join(QC_INTERIM, 'fastqscreen', '{sample}', '{sample}_screen.txt')
        params:
            args = '-q --force',
            subset = 400000,
            top = '10000 ',
            outdir = join(QC_INTERIM, 'fastqscreen', '{sample}')
        threads:
            4
        singularity:
            'docker://' + config['docker']['fastq-screen']
        shell:
            'fastq_screen '
            '--aligner bowtie2 '
            '--threads {threads} '
            '--top {params.top} '
            '--conf {input.config} '
            '--outdir {params.outdir} '
            '{params.args} '
            '{input.R2} '
else:
    rule qc_fastq_fastqscreen:
        input:
            unpack(get_processed_fastq),
            config = rules.qc_fastq_fastqscreen_config.output 
        output:
            join(QC_INTERIM, 'fastqscreen', '{sample}', '{sample}_screen.txt')
        params:
            args = '-q --force',
            subset = 400000,
            top = '10000 ',
            outdir = join(QC_INTERIM, 'fastqscreen', '{sample}')
        threads:
            4
        singularity:
            'docker://' + config['docker']['fastq-screen']
        shell:
            'fastq_screen '
            '--aligner bowtie2 '
            '--threads {threads} '
            '--top {params.top} '
            '--conf {input.config} '
            '--outdir {params.outdir} '
            '{params.args} '
            '{input.R1} '    

rule bfq_qc_common:
    input:
        expand(rules.qc_fastq_fastqc.output, sample=SAMPLES),
        expand(rules.qc_fastq_fastqscreen.output, sample=SAMPLES)
    output:
        expand(join(BFQ_INTERIM, 'fastqscreen', '{sample}', '{sample}_screen.txt'), sample=SAMPLES),
        expand(join(BFQ_INTERIM, 'fastqc', '{sample}', '{sample}_R1_fastqc.zip'), sample=SAMPLES)
    run:
        for src, dst in zip(input, output):
            shell('ln -srf {src} {dst}')
