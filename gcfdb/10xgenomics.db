#-*- mode:snakemake -*-
"""10xgenomics external data and reference/index builds

support.10xgenomics.com/single-cell-gene-expression/software/downloads

"""

_URLS= {
    'homo_sapiens': 'https://cf.10xgenomics.com/supp/cell-exp/refdata-gex-GRCh38-2020-A.tar.gz',
    'mus_musculus': 'https://cf.10xgenomics.com/supp/cell-exp/refdata-gex-mm10-2020-A.tar.gz',
    'homo_sapiens__mus_musculus': 'https://cf.10xgenomics.com/supp/cell-exp/refdata-gex-GRCh38-and-mm10-2020-A.tar.gz',
    'ercc': 'http://cf.10xgenomics.com/supp/cell-exp/refdata-cellranger-ercc92-1.2.0.tar.gz',
    'whitelist_v1': 'https://folk.ntnu.no/geiramh/10xgenomics/737K-april-2014_rc.txt',
    'whitelist_v2': 'https://folk.ntnu.no/geiramh/10xgenomics/737K-august-2016.txt',
    'whitelist_v3': 'https://folk.ntnu.no/geiramh/10xgenomics/3M-february-2018.txt',
    'sc3pv2_indexset': 'http://cf.10xgenomics.com/supp/cell-exp/chromium-shared-sample-indexes-plate.csv'}

_ASSEMBLY = {'homo_sapiens': 'GRCh38',
             'mus_musculus': 'GRCm38',
             'homo_sapiens__mus_musculus': 'GRCh38_GRCm38'
}

from os.path import join

extra_conf_fn = srcdir('10xgenomics.config')
if os.path.exists(extra_conf_fn):
    with open(extra_conf_fn) as fh:
        c  = yaml.load(fh, Loader=Loader) or {}
        update_config2(config, c)

# config
ORG = config.get('organism', 'homo_sapiens')
if ORG not in ['homo_sapiens', 'mus_musculus', 'homo_sapiens__mus_musculus']:
    raise ValueError('No 10x prebuild for org: {}'.format(ORG))

DB_CONF = config['db'].get('10xgenomics', {})
TX_RELEASE = DB_CONF['release']
TX_ASSEMBLY = config['db']['assembly'] = DB_CONF['assembly'] = _ASSEMBLY[ORG]

config['db']['10xgenomics'] = DB_CONF
OUTDIR = join(EXT_DIR, '10xgenomics', ORG, 'release-{}'.format(TX_RELEASE), TX_ASSEMBLY)

rule txgenomics_whitelist_v1:
    params:
        url = _URLS['whitelist_v1'],
        date = datetime.now().strftime("%d-%m-%Y")
    output:
        join(OUTDIR, '737K-april-2014_rc.txt')
    log:
        join(OUTDIR, 'logs', '737K-april-2014_rc.log')
    shell:
        """
        wget -O {output} {params.url}
        echo "10xGenomics whitelist v1,NA,{params.url},{params.date}" > {log}
        """
        
rule txgenomics_whitelist_v2:
    params:
        url = _URLS['whitelist_v2'],
        date = datetime.now().strftime("%d-%m-%Y")
    output:
        join(OUTDIR, '737K-august-2016.txt.txt')
    log:
        join(OUTDIR, 'logs', '737K-august-2016.txt.log')
    shell:
        """
        wget -O {output} {params.url}
        echo "10xGenomics whitelist v2,NA,{params.url},{params.date}" > {log}
        """
        
rule txgenomics_whitelist_v3:
    params:
        url = _URLS['whitelist_v3'],
        date = datetime.now().strftime("%d-%m-%Y")
    output:
        join(OUTDIR, '3M-february-2018.txt')
    log:
        join(OUTDIR, 'logs', '3M-february-2018.txt.log')
    shell:
        """
        wget -O {output} {params.url}
        echo "10xGenomics whitelist v3,NA,{params.url},{params.date}" > {log}
        """

rule txgenomics_org_prebuild:
    params:
        url = _URLS[ORG],
        out = OUTDIR,
        date = datetime.now().strftime("%d-%m-%Y")
    output:
        json = join(OUTDIR, 'reference.json'),
        gtf = join(OUTDIR, 'genes', 'genes.gtf'),
        fasta = join(OUTDIR, 'fasta', 'genome.fa'),
        star_index = join(OUTDIR, 'star', 'SA')
    log:
        join(OUTDIR, 'logs', '10x-reference.log')
    shell:
        """
        curl {params.url} | tar xvz --strip-components=1 -C {params.out}
        echo "10xGenomics reference,NA,{params.url},{params.date}" > {log}
        """

rule txgenomics_all:
    input:
        join(OUTDIR, '737K-april-2014_rc.txt'),
        join(OUTDIR, '737K-august-2016.txt.txt'),
        join(OUTDIR, '3M-february-2018.txt'),
        join(OUTDIR, 'reference.json')
