#-*- mode:snakemake -*-
"""GENCODE reference genomes

"""

import urllib.request as request
from contextlib import closing
import re
import os

DB_CONF = config['db'].get('ensembl', {})
ORG = config['organism'].lower().replace(' ', '_')

def get_current_gencode(config):
    """Get current release number for Gencode by parsing current md5sum file.
    """
    DB_CONF = config['db'].get('gencode', {})
    if 'release' in DB_CONF:
        return config
    if config['organism'] == 'homo_sapiens':
        url = 'ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/latest_release/MD5SUMS'
    elif config['organism'] == 'mus_musculus':
        url = 'ftp.ebi.ac.uk/pub/databases/gencode/Gencode_mouse/latest_release/MD5SUMS'
    else:
        logger.error('only human/mouse are supported organisms in Gencode. Got: {}'.format(config['organism']))
    protocol = 'https://'
    proxies = config.get('proxy', {}).get('server')
    if proxies:
        proxy_support = request.ProxyHandler(proxies)
        request.install_opener(request.build_opener(proxy_support))
    with closing(request.urlopen(protocol + url)) as response:
        try:
            logger.info('fetching {} ...'.format(url))
            out = response.read().decode('utf-8')
            release = re.findall(".*gencode.v(M?\d+)\..*", out)[0]
        except: 
            logger.error("release parse error or protocol error if {}".format(url))
    DB_CONF['release'] = str(release)
    config['db']['ensembl'] = DB_CONF
    return config
config = get_current_ensembl(config)
GENCODE_DIR = join(EXT_DIR, 'ensembl', 'release-{}'.format(config['db']['ensembl']['release']), ORG)


def init_gencode_from_organism(config):
    """Parse species annotations by given organsim and release number.

    This function set default configuration values for the gencode block.
    Main task is to set the assembly name from org and release.
    """
    DB_CONF = config['db'].get('gencode', {})
    if 'assembly' in DB_CONF:
        return config
    GENCODE_RELEASE = DB_CONF['release']
    RELEASE = GENCODE_RELEASE
    if GENCODE_RELEASE.startswith('M'):
        release_num = int(GENCODE_RELEASE[1:])
        GENCODE_ASSEMBLY = 'NCBIM37'
        if release_num > 1:
            GENCODE_ASSEMBLY = 'GRCm38'
        if release_num >= 26:
            GENCODE_ASSEMBLY = 'GRCm39'
    else:
        GENCODE_ASSEMBLY = 'GRCh37' if int(GENCODE_RELEASE) <= 19 else 'GRCh38'
    config['db']['assembly'] = DB_CONF['assembly'] = [GENCODE_ASSEMBLY]
    return config
config = init_gencode_from_organism(config)

def get_gencode_url(wildcards, sub='genome'):
    protocol = 'http://'
    org_name = 'human' if wildcards.organism == 'homo_sapiens' else 'mouse'
    base = 'ftp.ebi.ac.uk/pub/databases/gencode/Gencode_{}/release_{}'.format(org_name, wildcards.release)
    _files = {'genome': '{}.primary_assembly.genome.fa.gz'.format(wildcards.assembly),
              'gtf': 'gencode.v{}.primary_assembly.annotation.gtf.gz'.format(wildcards.release),
              'gff': 'gencode.v{}.primary_assembly.annotation.gff3.gz'.format(wildcards.release),
              'transcriptome': 'gencode.v{:}.transcripts.fa.gz'.format(wildcards.release),
              'trna': 'gencode.v{}.tRNAs.gtf.gz'.format(wildcards.release),
              'ncrna': 'gencode.v{}.lncRNA_transcripts.fa.gz'.format(wildcards.release)}
    return os.path.join(protocol+base, _files[sub])
    
rule gencode_genome:
    params:
        url = lambda wildcards: get_gencode_url(wildcards, sub='genome'),
        date = datetime.now().strftime("%d-%m-%Y"),
        release = DB_CONF['release'],
        proxy = config.get('proxy', {}).get('wget', ''),
    output:
        join(EXT_DIR, 'gencode', 'release-{release}', '{organism}', '{assembly}', 'fasta', 'genome.fa')
    threads: 
        8
    log:
        join(EXT_DIR, 'gencode', 'release-{release}', '{organism}', '{assembly}', 'logs', 'gencode.dna.log')
    shell: 
        """
        wget {params.proxy} -O- {params.url} | gunzip -c  > {output}
        echo 'Gencode DNA,release-{params.release},{params.url},{params.date}' > {log}
        """

rule gencode_noncoding:
    params:
        date = datetime.now().strftime("%d-%m-%Y"),
        release = DB_CONF['release'],
        proxy = config.get('proxy', {}).get('wget', ''),
        url = lambda wildcards, input: get_gencode_url(wildcards, 'ncrna')
    output:
        join(EXT_DIR, 'gencode', 'release-{release}', '{organism}', '{assembly}', 'fasta', 'ncrna.fa')
    threads: 
        24
    log:
        join(EXT_DIR, 'gencode', 'release-{release}', '{organism}', '{assembly}', 'logs', 'ncrna.log')
    shell: 
        """
        wget {params.proxy} -O- {params.url} | gunzip -c > {output}
        echo 'Gencode non-coding RNA,release-{params.release},{params.url},{params.date}' > {log}
        """

rule gencode_gff:
    params:
        date = datetime.now().strftime("%d-%m-%Y"),
        release = DB_CONF['release'],
        proxy = config.get('proxy', {}).get('wget', ''),
        url = lambda wildcards, input: get_gencode_url(wildcards, 'gff')
    output:
        join(EXT_DIR, 'gencode', 'release-{release}', '{organism}', '{assembly}', 'anno', 'genes.gff')
    threads: 
        24
    log:
        join(EXT_DIR, 'gencode', 'release-{release}', '{organism}', '{assembly}', 'logs', 'gff.log')
    shell: 
        """
        wget {params.proxy} -O- {params.url} | gunzip -c > {output}
        echo 'Gencode GFF,release-{params.release},{params.url},{params.date}' > {log}
        """

rule gencode_gtf:
    params:
        date = datetime.now().strftime("%d-%m-%Y"),
        release = DB_CONF['release'],
        proxy = config.get('proxy', {}).get('wget', ''),
        url = lambda wildcards, input: get_gencode_url(wildcards, 'gtf')
    output:
        join(EXT_DIR, 'gencode', 'release-{release}', '{organism}', '{assembly}', 'anno', 'genes.gtf')
    threads: 
        24
    log:
        join(EXT_DIR, 'gencode', 'release-{release}', '{organism}', '{assembly}', 'logs', 'gtf.log')
    shell: 
        """
        wget {params.proxy} -O- {params.url} | gunzip -c > {output}
        echo 'Gencode GTF,release-{params.release},{params.url},{params.date}' > {log}
        """ 
