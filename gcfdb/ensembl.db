#-*- mode:snakemake -*-
"""ENSEMBL reference genomes

"""

import urllib.request as request
from contextlib import closing
import re

DB_CONF = config['db'].get('ensembl', {})
ORG = config['organism'].lower().replace(' ', '_')
STRAIN = config.get('strain')

def get_current_ensembl(config):
    """Get current release number for Ensembl by parsing top-level current_README.
    """
    DB_CONF = config['db'].get('ensembl', {})
    if 'release' in DB_CONF:
        return config
    url = 'ftp.ensembl.org/pub/current_README'
    protocol = 'http://'
    proxies = config.get('proxy', {}).get('server')
    if proxies:
        proxy_support = request.ProxyHandler(proxies)
        request.install_opener(request.build_opener(proxy_support))
    with closing(request.urlopen(protocol + url)) as response:
        try:
            logger.info('fetching {} ...'.format(url))
            out = response.read()
            release = int(re.findall(b".*Release\s(\d+)\s+", out)[0])
        except: 
            logger.error("release parse error or protocol error if {}".format(url))
    DB_CONF['release'] = str(release)
    config['db']['ensembl'] = DB_CONF
    return config
config = get_current_ensembl(config)
ENSEMBL_DIR = join(EXT_DIR, 'ensembl', 'release-{}'.format(config['db']['ensembl']['release']), ORG)

def _parse_species_txt(tab, sep='\t'):
    """parse the content of species_EnsemblVertebrates.txt. Check for organism.
    """
    SP = {}
    header = tab.pop(0).split(sep)
    for line in tab:
        els = line.split(sep)
        row = dict(zip(header, els))
        species = row.pop('species')
        if species in SP:
            raise ValueError('found duplicate species!')
        if species == 'homo_sapiens':
            #fixme?
            row['assembly'] = row['assembly'].split('.')[0]
        SP[species] = row
    if not config['organism'] in SP:
        msg = 'Organism from config: `{}` not found in Ensembl.'.format(config['organism'])
        similar = []
        for species in SP.keys():
            genus = config['organism'].split('_')[0].lower()
            if species.lower().startswith(genus):
                similar.append(species)
        if len(similar) > 0:
            msg += ' Close hits: '
            msg += ', ',join(similar)
        logger.error(msg)
    else:
        return SP[config['organism']]
    return {}

def init_ensembl_from_organism(config):
    """Parse species annotations by given organsim and release number.

    This function set default configuration values for the ensembl block.
    Main task is to set the assembly name from org and release.
    """
    DB_CONF = config['db'].get('ensembl', {})
    if 'assembly' in DB_CONF:
        return config
    url = 'ftp.ensembl.org/pub/release-{}/species_EnsemblVertebrates.txt'.format(str(config['db']['ensembl']['release']))
    protocol = 'http://'
    proxies = config.get('proxy', {}).get('server')
    if proxies:
        proxy_support = request.ProxyHandler(proxies)
        request.install_opener(request.build_opener(proxy_support))
    with closing(request.urlopen(protocol + url)) as response:
        logger.info('fetching {} ...'.format(url))
        out = response.read()
    try:
        tab = out.decode('utf-8').splitlines()
    except:
        raise ValueError('failed to parse {}'.format(url))
    sp = _parse_species_txt(tab)
    
    for k, sp_k in [('assembly', 'assembly'), ('taxid', 'taxonomy_id'), ('acc_id', 'assembly_accession'), ('organism_name', '#name')]:
        if k not in DB_CONF and sp_k in sp:
            DB_CONF[k] = sp[sp_k]
    DB_CONF = config_val2list(DB_CONF)
    if isinstance(DB_CONF['assembly'], str):
        DB_CONF['assembly'] = [DB_CONF['assembly']]
    config['db']['ensembl'] = DB_CONF
    return config
config = init_ensembl_from_organism(config)

rule init_ensembl_species:
    params:
        url = 'http://ftp.ensembl.org/pub/release-{wildcards.release}/species_EnsemblVertebrates.txt',
        proxy = config.get('proxy', {}).get('wget', '')
    threads:
        48
    output:
        join(EXT_DIR, 'ensembl', 'release-{release}', 'lookup_tables', 'species_EnsemblVertebrates.txt')
    shell:
        'wget {params.proxy} -O- ftp://ftp.ensembl.org/pub/release-{wildcards.release}/species_EnsemblVertebrates.txt > {output}'

checkpoint build_ftp_table:
    input:
        rules.init_ensembl_species.output
    output:
        txt = join(EXT_DIR, 'ensembl', 'release-{release}', 'lookup_tables', '{organism}_ftp.txt')
    params:
        script = srcdir('scripts/build_ensembl_lookup.py'),
        proxy = config.get('proxy', {}).get('server', {}).get('ftp', 'none')
    singularity:
        'docker://' + config['docker']['default']
    shell:
        'python {params.script} {input} --proxy {params.proxy} --release {wildcards.release} --organism {wildcards.organism} --output {output}'


def get_ensembl_ftp(wildcards, sub='genome'):    
    fn = checkpoints.build_ftp_table.get(**wildcards).output[0]
    with open(fn) as fh:
        txt = fh.read().splitlines()
        header = txt.pop(0).split('\t')
        for line in txt:
            els = line.split('\t')
            row = dict(zip(header, els))
            if row['species'] in ['homo_sapiens', 'mus_musculus']:
                row['assembly'] = row['assembly'].split('.')[0]
            if row['species'] == wildcards.organism:
                if row['assembly'] != wildcards.assembly:
                    msg = '{} assembly is not supported for this version ({}) of Ensembl. Assembly supported: {}'
                    msg = msg.format(wildcards.assembly, wildcards.release, row['assembly'])
                    raise ValueError(msg)
                return row['ftp_{}'.format(sub)]
    
rule ensembl_genome:
    input:
        lambda wildcards: checkpoints.build_ftp_table.get(**wildcards).output[0]
    params:
        date = datetime.now().strftime("%d-%m-%Y"),
        release = config['db']['ensembl']['release'],
        proxy = config.get('proxy', {}).get('wget', ''),
        url = lambda wildcards, input: get_ensembl_ftp(wildcards, 'genome')
    output:
        join(EXT_DIR, 'ensembl', 'release-{release}', '{organism}', '{assembly}', 'fasta', 'genome.fa')
    threads: 
        24
    log:
        join(EXT_DIR, 'ensembl', 'release-{release}', '{organism}', '{assembly}', 'logs', 'genome.log')
    shell: 
        """
        wget {params.proxy} -O- {params.url} | gunzip -c > {output}
        echo 'Ensembl DNA,release-{params.release},{params.url},{params.date}' > {log}
        """

rule ensembl_noncoding:
    input:
        lambda wildcards: checkpoints.build_ftp_table.get(**wildcards).output[0]
    params:
        date = datetime.now().strftime("%d-%m-%Y"),
        release = DB_CONF['release'],
        proxy = config.get('proxy', {}).get('wget', ''),
        url = lambda wildcards, input: get_ensembl_ftp(wildcards, 'ncrna')
    output:
        join(EXT_DIR, 'ensembl', 'release-{release}', '{organism}', '{assembly}', 'fasta', 'ncrna.fa')
    threads: 
        24
    log:
        join(EXT_DIR, 'ensembl', 'release-{release}', '{organism}', '{assembly}', 'logs', 'ncrna.log')
    shell: 
        """
        wget {params.proxy} -O- {params.url} | gunzip -c > {output}
        echo 'Ensembl DNA,release-{params.release},{params.url},{params.date}' > {log}
        """

rule ensembl_gff:
    input:
        lambda wildcards: checkpoints.build_ftp_table.get(**wildcards).output[0]
    params:
        date = datetime.now().strftime("%d-%m-%Y"),
        release = DB_CONF['release'],
        proxy = config.get('proxy', {}).get('wget', ''),
        url = lambda wildcards, input: get_ensembl_ftp(wildcards, 'gff')
    output:
        join(EXT_DIR, 'ensembl', 'release-{release}', '{organism}', '{assembly}', 'anno', 'genes.gff')
    threads: 
        24
    log:
        join(EXT_DIR, 'ensembl', 'release-{release}', '{organism}', '{assembly}', 'logs', 'gff.log')
    shell: 
        """
        wget {params.proxy} -O- {params.url} | gunzip -c > {output}
        echo 'Ensembl GFF,release-{params.release},{params.url},{params.date}' > {log}
        """

rule ensembl_gtf:
    input:
        lambda wildcards: checkpoints.build_ftp_table.get(**wildcards).output[0]
    params:
        date = datetime.now().strftime("%d-%m-%Y"),
        release = DB_CONF['release'],
        proxy = config.get('proxy', {}).get('wget', ''),
        url = lambda wildcards, input: get_ensembl_ftp(wildcards, 'gtf')
    output:
        join(EXT_DIR, 'ensembl', 'release-{release}', '{organism}', '{assembly}', 'anno', 'genes.gtf')
    threads: 
        24
    log:
        join(EXT_DIR, 'ensembl', 'release-{release}', '{organism}', '{assembly}', 'logs', 'gtf.log')
    shell: 
        """
        wget {params.proxy} -O- {params.url} | gunzip -c > {output}
        echo 'Ensembl GTF,release-{params.release},{params.url},{params.date}' > {log}
        """ 
