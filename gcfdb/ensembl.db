#-*- mode:snakemake -*-
"""ENSEMBL reference genomes

Use ensembl.org for vertebrates and ensemblgenomes for other kingdoms.

0) Check for config custom reference

1) Initialize ensembl from organism (set required configuration : assembly, release numbers)
2) Build urls for downloading files and add to config
3) Download files into REF_DIR structure

"""

# assembly name lookup table
include:
    'init_ensembl.smk'


if '__' in config['organism']:
    MULTI_ORG = ORG.split('__')
    multi_species = True
else:
    mulit_species = False


def init_ensembl(config):
    """Set assembly from organism
    
    """
    import gzip
    species_match = False
    release = config['db']['ensembl']['release']
    fn = srcdir('tables/ensembl-{}.gz'.format(release))
    if not os.path.exists(fn):
        logger.info('ensembl lookupfile for release {} is missing!'.format(release))
        return config
    header = ['species', 'assembly', 'division']

    for row in gzip.open(fn).read().decode('utf-8').splitlines():
        els = dict(zip(header, row.split('\t')))
        if els['species'].lower() == config['organism'].lower():
            species_match = True
            if config['organism'] in ['homo_sapiens', 'mus_musculus']:
                els['assembly'] = els['assembly'].split('.')[0]
            for k in header:
                config['db']['ensembl'][k] = els[k]
    if not species_match:
        logger.error('species `{}` not found in ensembl lookup file'.format(config['organism']))
    return config

config = init_ensembl(config)
DB_CONF = config['db']['ensembl']


def get_ensembl_url(wildcards, tag='dna'):
    PROTOCOL = 'http://'
    if wildcards.release != str(config['db']['ensembl']['release']):
        logger.error('ensembl release mismatch configuration. wildcards vs config value')
        raise ValueError
    DIVISION = DB_CONF.get('division')
    if DIVISION == 'vertebrates':
        url = 'ftp.ensembl.org/pub/release-{}/{}/{}'
        RELEASE = wildcards.release
    else:
        print("HEIIIIIII____________\n")
        url = 'ftp.ebi.ac.uk/ensemblgenomes/pub/release-{{}}/{}/{{}}/{{}}'.format(DIVISION)
        RELEASE = str(config['db']['ensemblgenomes']['release'])
    
    if tag == 'dna':
        if wildcards.organism in ['homo_sapiens', 'mus_musculus']:
            if '.' in wildcards.assembly:
                wildcards.assembly = wildcards.assembly.split('.')[0]
            dna_fn = '.'.join([wildcards.organism.capitalize(), wildcards.assembly, 'dna', 'primary_assembly', 'fa', 'gz'])
        else:
            dna_fn = '.'.join([wildcards.organism.capitalize(), wildcards.assembly, 'dna', 'toplevel', 'fa', 'gz'])
        return join(PROTOCOL + url.format(RELEASE, 'fasta', wildcards.organism), 'dna', dna_fn)
    elif tag == 'gtf':
        gtf_fn = '.'.join([wildcards.organism.capitalize(), wildcards.assembly, RELEASE, 'gtf', 'gz'])
        return join(PROTOCOL + url.format(RELEASE, 'gtf', wildcards.organism), gtf_fn)
    elif tag == 'gff':
        gff_fn = '.'.join([wildcards.organism.capitalize(), wildcards.assembly, RELEASE, 'gff3', 'gz'])
        return join(PROTOCOL + url.format(RELEASE, 'gff3', wildcards.organism), gff_fn)
    elif tag == 'ncrna':
        ncrna_fn = '.'.join([wildcards.organism.capitalize(), wildcards.assembly, 'ncrna', 'fa', 'gz'])
        return join(PROTOCOL + url.format(RELEASE, 'fasta', wildcards.organism), 'ncrna', ncrna_fn)
    else:
        raise ValueError
        

rule ensembl_genome:
    input:
        table = srcdir('tables/ensembl-{}.gz'.format(ENS_RELEASE))
    params:
        date = datetime.now().strftime("%d-%m-%Y"),
        proxy = config.get('proxy', {}).get('wget', ''),
        url = lambda wildcards: get_ensembl_url(wildcards, tag='dna')
    output:
        genome = join(EXT_DIR, 'ensembl', 'release-{release}', '{organism}', '{assembly}', 'fasta', 'genome.fa')
    threads: 
        24
    log:
        join(EXT_DIR, 'ensembl', 'release-{release}', '{organism}', '{assembly}', 'logs', 'genome.log')
    shell:
        """
        wget {params.proxy} -O- {params.url} | gunzip -c >> {output.genome}
        echo 'Ensembl DNA,release-{wildcards.release},{params.url},{params.date}' >> {log}
        """

rule ensembl_noncoding:
    input:
        table = srcdir('tables/ensembl-{}.gz'.format(ENS_RELEASE))
    params:
        date = datetime.now().strftime("%d-%m-%Y"),
        proxy = config.get('proxy', {}).get('wget', ''),
        url = lambda wildcards: get_ensembl_url(wildcards, tag='ncrna')
    output:
        join(EXT_DIR, 'ensembl', 'release-{release}', '{organism}', '{assembly}', 'fasta', 'ncrna.fa')
    threads: 
        24
    log:
        join(EXT_DIR, 'ensembl', 'release-{release}', '{organism}', '{assembly}', 'logs', 'ncrna.log')
    shell: 
        """
        wget {params.proxy} -O- {params.url} | gunzip -c >> {output}
        echo 'Ensembl DNA,release-{wildcards.release},{params.url},{params.date}' > {log}
        """

rule ensembl_gff:
    input:
        table = srcdir('tables/ensembl-{}.gz'.format(ENS_RELEASE))
    params:
        date = datetime.now().strftime("%d-%m-%Y"),
        proxy = config.get('proxy', {}).get('wget', ''),
        url = lambda wildcards: get_ensembl_url(wildcards, tag='gff')
    output:
        join(EXT_DIR, 'ensembl', 'release-{release}', '{organism}', '{assembly}', 'anno', '{organism}.{assembly}.{release}.gff')
    threads: 
        24
    log:
        join(EXT_DIR, 'ensembl', 'release-{release}', '{organism}', '{assembly}', 'logs', 'gff.log')
    shell: 
        """
        wget {params.proxy} -O- {params.url} | gunzip -c >> {output}
        echo 'Ensembl GFF,release-{wildcards.release},{params.url},{params.date}' > {log}
        """

rule ensembl_gtf:
    input:
        table = srcdir('tables/ensembl-{}.gz'.format(ENS_RELEASE))
    params:
        date = datetime.now().strftime("%d-%m-%Y"),
        proxy = config.get('proxy', {}).get('wget', ''),
        url = lambda wildcards: get_ensembl_url(wildcards, tag='gtf')
    output:
        join(EXT_DIR, 'ensembl', 'release-{release}', '{organism}', '{assembly}', 'anno', '{organism}.{assembly}.{release}.gtf')
    threads: 
        24
    log:
        join(EXT_DIR, 'ensembl', 'release-{release}', '{organism}', '{assembly}', 'logs', 'gtf.log')
    shell: 
        """
        wget {params.proxy} -O- {params.url} | gunzip -c >> {output}
        echo 'Ensembl GTF,release-{wildcards.release},{params.url},{params.date}' > {log}
        """ 


rule ensembl_symlink_genes:
    input:
        join(EXT_DIR, 'ensembl', 'release-{release}', '{organism}', '{assembly}', 'anno', '{organism}.{assembly}.{release}.{ext}')
    output:
        join(EXT_DIR, 'ensembl', 'release-{release}', '{organism}', '{assembly}', 'anno', 'genes.{ext}')
    wildcard_constraints:
        ext = 'g.+f$'
    shell:
        'ln -sr {input} {output}'

    
