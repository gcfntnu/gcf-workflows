#-*- mode:snakemake -*-
"""NCBI refseq genomes

Mostly copied from https://github.com/eclarke/refseq_dl

"""
import urllib.request as request
from contextlib import closing

import re
import csv
from pathlib import Path

DB_CONF = config['db'].get('refseq', {})

KINGDOM = DB_CONF.get('kingdom', 'bacteria')
RELEASE = DB_CONF.get('release', '50')

ORG = config['organism'].lower().replace(' ', '_')
STRAIN = config.get('strain')

no_alt = {'url': 'https://ftp.ncbi.nlm.nih.gov/genomes/refseq/vertebrate_mammalian/Homo_sapiens/all_assembly_versions/GCF_000001405.39_GRCh38.p13/GRCh38_major_release_seqs_for_alignment_pipelines/GCA_000001405.15_GRCh38_no_alt_analysis_set.fna.gz', 'name': 'no_alt'}
SPECIALS= {'homo_sapiens': {}}
SPECIALS['homo_sapiens']['no_alt'] = no_alt


REFSEQ_DIR = join(EXT_DIR, 'refseq', 'release-{}'.format(RELEASE), ORG)


def _get_current_refseq():
    """Get current release number for refseq.
    """
    url = 'ftp.ncbi.nlm.nih.gov/refseq/release/RELEASE_NUMBER'
    protocol = 'https://'
    proxies = config.get('proxy', {}).get('server')
    if proxies:
        proxy_support = request.ProxyHandler(proxies)
        request.install_opener(request.build_opener(proxy_support))
        
    with closing(request.urlopen(protocol + url)) as response:
        try:
            out = response.read()
            release = int(re.findall(b"\d+", out)[0])
        except: 
            raise ValueError("release parse error or protocol error")
    return str(release)

if DB_CONF.get('release') is None or DB_CONF.get('release') == '':
    DB_CONF['release'] = _get_current_refseq()
    config['db']['refseq'] = DB_CONF

def _parse_species_txt(df, sep='\t'):
    """parse the content of assembly_summary_refseq.txt. Check for organism.
    """
    df = df.copy()
    SP = collections.defaultdict(list)
    comment = df.pop(0)
    header = df.pop(0).split(sep)
    for line in df:
        els = line.split(sep)
        row = dict(zip(header, els))
        species = row['organism_name'].lower().replace(' ', '_')
        if species in ['homo_sapiens']:
            row['asm_name'] = row['asm_name'].split('.')[0]
        row['organism'] = species
        SP[species].append(row)
        
    if not config['organism'] in SP:
        msg = 'Organism from config: `{}` not found in Ensembl.'.format(config['organism'])
        similar = []
        for species in SP.keys():
            genus = config['organism'].split('_')[0].lower()
            if species.lower().startswith(genus):
                similar.append(species)
        if len(similar) > 0:
            msg += ' Close hits: '
            msg += ', ',join(similar)
        raise ValueError(msg)
    else:
        return SP[config['organism']]
    
def _init_refseq_from_organism():
    """Parse species annotations by given organsim and release number.

    This function set default configuration values for the refseq block.
    """
    url = 'ftp.ncbi.nlm.nih.gov/genomes/refseq/assembly_summary_refseq.txt'
    protocol = 'https://'
    proxies = config.get('proxy', {}).get('server')
    if proxies:
        proxy_support = request.ProxyHandler(proxies)
        request.install_opener(request.build_opener(proxy_support))
    with closing(request.urlopen(protocol + url)) as response:
        out = response.read()
    try:
        tab = out.decode('utf-8').splitlines()
    except:
        raise ValueError('failed to parse url')
    SP = _parse_species_txt(tab)
    for sp in SP: 
        for k, sp_k in [('assembly', 'asm_name'), ('taxid', 'species_taxid'), ('acc_id', '# assembly_accession'), ('organism_name', 'organism_name')]:
            if k not in DB_CONF:
                DB_CONF[k] = sp[sp_k]
            else:
                if sp[sp_k] == DB_CONF[k]:
                    pass
                else:
                    DB_CONF[k] = ','.join([DB_CONF[k], sp[sp_k]])
    config['db']['refseq'] = DB_CONF

_init_refseq_from_organism()

rule init_refseq_species:
    params:
        url = 'ftp.ncbi.nlm.nih.gov/genomes/refseq/assembly_summary_refseq.txt',
        proxy = config.get('proxy', {}).get('wget', '')
    threads:
        48
    output:
        join(EXT_DIR, 'refseq', 'release-{release}', 'lookup_tables', 'assembly_summary_refseq.txt')
    shell:
        'wget {params.proxy} -O- {params.url} > {output}'

checkpoint build_refseq_ftp_table:
    input:
        rules.init_refseq_species.output
    output:
        txt = join(EXT_DIR, 'refseq', 'release-{release}', 'lookup_tables', '{organism}_ftp.txt')
    params:
        script = srcdir('scripts/build_refseq_lookup.py'),
        proxy = config.get('proxy', {}).get('server', {}).get('ftp', 'none')
    singularity:
        'docker://' + config['docker']['default']
    shell:
        'python {params.script} {input} --proxy {params.proxy} --release {wildcards.release} --organism {wildcards.organism} --output {output}'


def get_refseq_ftp(wildcards, input, sub='genome'):
    """Returns ftp path of first hit matching organism.
    """
    fn = checkpoints.build_refseq_ftp_table.get(**wildcards).output[0]
    with open(input[0]) as fh:
        txt = fh.read().splitlines()
        header = txt.pop(0).split('\t')
        for line in txt:
            els = line.split('\t')
            row = dict(zip(header, els))
            if row['species'] in ['homo_sapiens']:
                row['assembly'] = row['assembly'].split('.')[0]
            if row['species'] == wildcards.organism:
                if row['assembly'] != wildcards.assembly:
                    msg = '{} assembly is not supported for this version ({}) of Ensembl. Assembly supported: {}'
                    msg = msg.format(wildcards.assembly, wildcards.release, row['assembly'])
                    raise ValueError(msg)
                return row['ftp_{}'.format(sub)]

rule refseq_genome:
    input:
        lambda wildcards: checkpoints.build_refseq_ftp_table.get(**wildcards).output[0]
    params:
        date = datetime.now().strftime("%d-%m-%Y"),
        release = config['db']['refseq']['release'],
        proxy = config.get('proxy', {}).get('wget', ''),
        url = lambda wildcards, input: get_refseq_ftp(wildcards, input, 'genome')
    output:
        join(EXT_DIR, 'refseq', 'release-{release}', '{organism}', '{assembly}', 'fasta', 'genome.fa')
    threads: 
        24
    log:
        join(EXT_DIR, 'refseq', 'release-{release}', '{organism}', '{assembly}', 'logs', 'genome.log')
    shell: 
        """
        wget {params.proxy} -O- {params.url} | gunzip -c > {output}
        echo 'Refseq DNA,release-{params.release},{params.url},{params.date}' > {log}
        """

rule refseq_gff:
    input:
        lambda wildcards: checkpoints.build_refseq_ftp_table.get(**wildcards).output[0]
    params:
        date = datetime.now().strftime("%d-%m-%Y"),
        release = DB_CONF['release'],
        proxy = config.get('proxy', {}).get('wget', ''),
        url = lambda wildcards, input: get_refseq_ftp(wildcards, input, 'gff')
    output:
        join(EXT_DIR, 'refseq', 'release-{release}', '{organism}', '{assembly}', 'anno', 'genes.gff')
    threads: 
        24
    log:
        join(EXT_DIR, 'refseq', 'release-{release}', '{organism}', '{assembly}', 'logs', 'gff.log')
    shell: 
        """
        wget {params.proxy} -O- {params.url} | gunzip -c > {output}
        echo 'Refseq GFF,release-{params.release},{params.url},{params.date}' > {log}
        """

rule refseq_gtf:
    input:
        lambda wildcards: checkpoints.build_refseq_ftp_table.get(**wildcards).output[0]
    params:
        date = datetime.now().strftime("%d-%m-%Y"),
        release = DB_CONF['release'],
        proxy = config.get('proxy', {}).get('wget', ''),
        url = lambda wildcards, input: get_refseq_ftp(wildcards, input, 'gtf')
    output:
        join(EXT_DIR, 'refseq', 'release-{release}', '{organism}', '{assembly}', 'anno', 'genes.gtf')
    threads: 
        24
    log:
        join(EXT_DIR, 'refseq', 'release-{release}', '{organism}', '{assembly}', 'logs', 'gtf.log')
    shell: 
        """
        wget {params.proxy} -O- {params.url} | gunzip -c > {output}
        echo 'Refseq GTF,release-{params.release},{params.url},{params.date}' > {log}
        """
    
rule refseq_assemblies:
    input:
        lambda wildcards: checkpoints.build_refseq_ftp_table.get(**wildcards).output[0]
    params:
        date = datetime.now().strftime("%d-%m-%Y"),
        release = config['db']['refseq']['release'],
        proxy = config.get('proxy', {}).get('wget', ''),
        url = lambda wildcards, input: get_refseq_ftp(wildcards, input, 'genome')
    output:
        join(EXT_DIR, 'refseq', 'release-{release}', '{organism}', 'merged_assemblies', 'fasta', 'genome.fna')
    threads: 
        24
    log:
        join(EXT_DIR, 'refseq', 'release-{release}', '{organism}', 'merged_assemblies', 'logs', 'genome.log')
    run: 
        for url in params.url:
            shell('wget {params.proxy} {url}')
        shell('zcat *.genomic.fna.gz > {output}')
        shell("echo 'Refseq DNA,release-{params.release},{params.url},{params.date}' > {log}")
        shell('rm *.genomic.fna.gz')

print("REFSEQ:")
print(DB_CONF)
