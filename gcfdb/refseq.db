#-*- mode:snakemake -*-
"""REFSEQ reference genomes

"""

DB_CONF = config['db'].get('refseq', {})
ASSEMBLY = DB_CONF.pop('assembly', None)
STRAIN = config.get('strain') or DB_CONF.pop('strain', None)
ORG = config['organism'].lower().strip().replace(' ', '_')
config['organism'] = ORG
PROXIES = config.get('proxy', {}).get('server')

def init_refseq(config):
    """Initialize config dict from refseq table
    Set assembly from organism
    
    """
    release = config['db']['refseq']['release']
    config['db']['refseq']['multi_assembly'] = False
    fn = srcdir('tables/refseq-{}.tsv'.format(release))
    if not os.path.exists(fn):
        logger.info('refseq lookupfile for release {} is missing!'.format(release))
        logger.info('expected: {}'.format(fn))
        return config
    keys = ['division', 'strain', 'taxon_id', 'assembly', 'refseq_category', 'accession', 'ftp_genome', 'ftp_gtf', 'ftp_gff']
    with open(fn) as fh:
        txt = fh.read().splitlines()
    header = txt.pop(0).split('\t')
    species_index = header.index('species')
    species_match = False
    rows = []
    for row in txt:
        els = dict(zip(header, row.split('\t')))
        species = '_'.join(els['species'].lower().split('_')[:2])
        species_match = species == config['organism'].lower()
        assembly_match = ASSEMBLY is None or ASSEMBLY == els['assembly']
        strain_match = STRAIN is None or STRAIN == els['strain']
        if species_match and assembly_match and strain_match:
            rows.append(els)
    if len(rows) == 0:
        logger.error('species `{}` not found in refseq lookup file'.format(config['organism']))
    else:
        logger.info('found {} entries of {} in table'.format(len(rows), config['organism']))
        #cats = set([row['refseq_category'] for row in rows])
        #print(cats)
    # 1) use reference assembly if present 
    for row in rows:
        if row['refseq_category'] == 'reference genome':
            for k in keys:
                config['db']['refseq'][k] = row[k]
            return config

    # 2) use representative assembly/assemblies
    repr_genomes = []
    for row in rows:
        if row['refseq_category'] == 'representative genome':
            repr_genomes.append(row)
    if len(repr_genomes) > 0:
        if len(repr_genomes) == 1:
            row = repr_genomes[0]
            for k in keys:
                config['db']['refseq'][k] = row[k]
            return config
        else:
            config['db']['refseq']['multi_assembly'] = True
            for row in repr_genomes:
                for k in keys:
                    if k in config['db']['refseq']:
                        config['db']['refseq'][k] += ',{}'.format(row[k])
                    else:
                        config['db']['refseq'][k] = str(row[k])
            for k in keys:
                vals = set(config['db']['refseq'][k].split(','))
                if len(vals) == 1:
                    config['db']['refseq'][k] = vals.pop()
            if len(config['db']['refseq']['ftp_genome'].split(',')) == 1:
                config['db']['refseq']['multi_assembly'] = False
            return config

    # 3) use all assemblies
    config['db']['refseq']['multi_assembly'] = True
    for row in rows:
        for k in keys:
            if k in config['db']['refseq']:
                config['db']['refseq'][k] += ',{}'.format(row[k])
            else:
                config['db']['refseq'][k] = str(row[k])
    for k in keys:
        vals = set(config['db']['refseq'][k].split(','))
        if len(vals) == 1:
            config['db']['refseq'][k] = vals.pop()
    if len(config['db']['refseq']['ftp_genome'].split(',')) == 1:
        config['db']['refseq']['multi_assembly'] = False
    return config
    

config = init_refseq(config)

if config['db']['refseq']['multi_assembly']:
    config['db']['refseq']['assembly'] = 'merged_assemblies'

REFSEQ_DB = srcdir('tables/refseq-{}.tsv.gz'.format(config['db']['refseq']['release']))

rule refseq_lookuptable:
    output:
        REFSEQ_DB
    params:
        script = srcdir('scripts/build_refseq_lookup.py'),
        proxy = config.get('proxy', {}).get('server', {}).get('ftp'),
        kingdoms = 'vertebrate_mammalian,vertebrate_other,plant,archaea,fungi,invertebrate,protozoa,bacteria,viral',
        release = config['db']['refseq']['release']
    singularity:
        'docker://' + config['docker']['default']
    shell:
        'python {params.script} --proxy {params.proxy} --release {params.release} --kingdoms {params.kingdoms}  --output {output}'

rule refseq_genome:
    input:
        REFSEQ_DB
    params:
        release = config['db']['refseq']['release'],
        proxy = config.get('proxy', {}).get('wget', ''),
        url = config['db']['refseq'].get('ftp_genome','').split(',')[:2]
    output:
        genome = join(EXT_DIR, 'refseq', 'release-{release}', '{organism}', '{assembly}', 'fasta', 'genome.fa')
    threads: 
        24
    log:
        join(EXT_DIR, 'refseq', 'release-{release}', '{organism}', '{assembly}', 'logs', 'genome.log')
    run:
        for url in params.url:
            shell("wget {params.proxy} -O- {url} | gunzip -c >> {output.genome}")
            shell("echo 'Refseq DNA,release-{params.release},{params.url},`date -I`' >> {log}")

rule refseq_gff:
    input:
        REFSEQ_DB
    params:
        release = DB_CONF['release'],
        proxy = config.get('proxy', {}).get('wget', ''),
        url = config['db']['refseq'].get('ftp_gff', '').split(',')[:2]
    output:
        join(EXT_DIR, 'refseq', 'release-{release}', '{organism}', '{assembly}', 'anno', '{organism}.{assembly}.{release}.gff')
    threads: 
        24
    log:
        join(EXT_DIR, 'refseq', 'release-{release}', '{organism}', '{assembly}', 'logs', 'gff.log')
    run: 
        for url in params.url:
            shell("wget {params.proxy} -O- {params.url} | gunzip -c  | grep -v '^#' >> {output}")
            shell("echo 'Refseq GFF,release-{params.release},{params.url},`date -I`' > {log}")
            
rule refseq_gtf:
    input:
        table = REFSEQ_DB
    params:
        release = DB_CONF['release'],
        proxy = config.get('proxy', {}).get('wget', ''),
        url = config['db']['refseq'].get('ftp_gtf', '').split(',')[:2]
    output:
        join(EXT_DIR, 'refseq', 'release-{release}', '{organism}', '{assembly}', 'anno', '{organism}.{assembly}.{release}.gtf')
    threads: 
        24
    log:
        join(EXT_DIR, 'refseq', 'release-{release}', '{organism}', '{assembly}', 'logs', 'gtf.log')
    run: 
        for url in params.url:
            shell("wget {params.proxy} -O- {params.url} | gunzip -c  | grep -v '^#' >> {output}")
            shell("echo 'Refseq GTF,release-{params.release},{params.url},`date -I`' > {log}")

if config['db']['refseq']['division'] == 'bacteria':
    ruleorder: refseq_gtf_noneukaryot > refseq_symlink_genes
    
rule refseq_gtf_noneukaryot:
    input:
        join(EXT_DIR, 'refseq', 'release-{release}', '{organism}', '{assembly}', 'anno', '{organism}.{assembly}.{release}.gtf')
    output:
        join(EXT_DIR, 'refseq', 'release-{release}', '{organism}', '{assembly}', 'anno', 'genes.gtf')
    params:
        script = srcdir('scripts/refseq_gtf.py')
    shell:
        'python {params.script} {input} {output}'

rule refseq_symlink_genes:
    params:
        release = DB_CONF['release']
    input:
        join(EXT_DIR, 'refseq', 'release-{release}', '{organism}', '{assembly}', 'anno', '{organism}.{assembly}.{release}.{ext}')
    output:
        join(EXT_DIR, 'refseq', 'release-{release}', '{organism}', '{assembly}', 'anno', 'genes.{ext}')
    wildcard_constraints:
        ext = 'g.+f$'
    shell:
        'ln -sr {input} {output}'
