#-*- mode:snakemake -*-
extra_conf_fn = srcdir('fastp.config')
if os.path.exists(extra_conf_fn):
    with open(extra_conf_fn) as fh:
        c  = yaml.load(fh, Loader=Loader) or {}
        update_config2(config, c)


rule fastp_interleave_fastq:
    input:
        R1 = _filter_get_raw_R1,
        R2 = _filter_get_raw_R2,
    output:
        pipe(join(FILTER_INTERIM, 'interleaved_fastq', '{sample}.fastq'))
    params:
        script = srcdir('scripts/interleave_fastq.sh')
    shell:
        '{params.script} <(zcat {input.R1}) <(zcat {input.R2}) > {output}'

rule fastp_se:
    input:
        _filter_get_raw_R1
    output:
        join(FILTER_INTERIM, 'fastp_se', '{sample}_R1.fastq.gz')
    params:
        config['filter']['fastp']['params']
    log:
        json = 'logs/{sample}/fastp.json',
        html = 'logs/{sample}/fastp.html'
    singularity:
        'docker://' + config['docker']['fastp']
    shell:
        ' zcat {input} | fastp --stdin -o {output.R1} -j {logs.json} -h {log.html} {params}'

rule fastp_pe:
    input:
        join(FILTER_INTERIM, 'interleaved_fastq', '{sample}.fastq')
    output:
        R1 = join(FILTER_INTERIM, 'fastp_pe', '{sample}_R1.fastq.gz'),
        R2 = join(FILTER_INTERIM, 'fastp_pe', '{sample}_R2.fastq.gz')
    threads:
        3
    singularity:
        'docker://' + config['docker']['fastp']
    params:
        config['filter']['fastp']['params']
    log:
        json = 'logs/{sample}/fastp.json',
        html = 'logs/{sample}/fastp.html'        
    shell:
        'cat {input} | fastp --stdin --interleaved_in -o {output.R1} -O {output.R2} -j {log.json} -h {log.html} {params}'

rule fastp_10x_R1:
    input:
        _filter_get_raw_R1
    output:
        temp(join(FILTER_INTERIM, 'fastp_10x', '{sample}_R1.fastq'))
    shell:
        ' zcat {input} > {output}'
        
rule fastp_10x_R2:
    input:
        _filter_get_raw_R2
    output:
        temp(join(FILTER_INTERIM, 'fastp_10x', '{sample}_R2.trimmed.fastq'))
    singularity:
        'docker://' + config['docker']['fastp']
    params:
        config['filter']['fastp']['params']
    log:
        json = 'logs/{sample}/fastp.json',
        html = 'logs/{sample}/fastp.html' 
    shell:
        'zcat {input} | fastp --stdin -o {output} -j {log.json} -h {log.html} {params}'

rule fastp_10x_repair:
    input:
        R1 = join(FILTER_INTERIM, 'fastp_10x', '{sample}_R1.fastq'),
        R2 = join(FILTER_INTERIM, 'fastp_10x', '{sample}_R2.trimmed.fastq')
    params:
        out = join(FILTER_INTERIM, 'fastp_10x')
    singularity:
        'docker://' + config['docker']['fastq_pair']
    output:
        R1 = temp(join(FILTER_INTERIM, 'fastp_10x', '{sample}_R1.fastq.paired.fq')),
        R2 = temp(join(FILTER_INTERIM, 'fastp_10x', '{sample}_R2.trimmed.fastq.paired.fq'))
    shell:
        'fastq_pair {input} '

rule fastp_10x:
    input:
        R1 = join(FILTER_INTERIM, 'fastp_10x', '{sample}_R1.fastq.paired.fq'),
        R2 = join(FILTER_INTERIM, 'fastp_10x', '{sample}_R2.trimmed.fastq.paired.fq')
    params:
        out = join(FILTER_INTERIM, 'fastp_10x')
    output:
        R1 = join(FILTER_INTERIM, 'fastp_10x', '{sample}_S1_L000_R1_001.fastq.gz'),
        R2 = join(FILTER_INTERIM, 'fastp_10x', '{sample}_S1_L000_R2_001.fastq.gz')   
    shell:
        """
        gzip {input.R1} -c > {output.R1}
        gzip {input.R2} -c > {output.R2}
        """
